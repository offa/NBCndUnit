/*
 * NBCndUnit - C/C++ unit tests for NetBeans.
 * Copyright (C) 2015-2021  offa
 *
 * This file is part of NBCndUnit.
 *
 * NBCndUnit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NBCndUnit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NBCndUnit.  If not, see <http://www.gnu.org/licenses/>.
 */

package bv.offa.netbeans.cnd.unittest.wizard;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * The class {@code NewTestSuiteVisualPanel1} implements a visual panel for
 * test suites.
 *
 * @author offa
 */
public class NewTestSuiteVisualPanel1 extends AbstractVisualPanel
{
    private static final long serialVersionUID = 1L;

    public NewTestSuiteVisualPanel1()
    {
        super("Step #1");

        initComponents();
        initListener();
    }



    /**
     * Returns whether the setup generation is enabled.
     *
     * @return  Setting
     */
    public boolean getGenerateSetup()
    {
        return cbGenerateSetup.isSelected();
    }


    /**
     * Returns whether the teardown generation is enabled.
     *
     * @return  Setting
     */
    public boolean getGenerateTeardown()
    {
        return cbGenerateTeardown.isSelected();
    }


    /**
     * Returns a list of the test case names. Empty names are <i>not</i> added.
     *
     * @return  Names
     */
    public List<String> getTestCaseNames()
    {
        List<String> testCases = new ArrayList<>();
        final String testCaseName = tfTestCaseName.getText();

        if (!testCaseName.isEmpty())
        {
            testCases.add(testCaseName);
        }

        return testCases;
    }


    /**
     * Returns whether the test case generation is enabled.
     *
     * @return  Setting
     */
    public boolean getGenerateTestCases()
    {
        return cbGenerateTestCases.isSelected();
    }


    /**
     * Returns the test suite name.
     *
     * @return  Name
     */
    public String getTestSuiteName()
    {
        return tfTestSuiteName.getText();
    }


    /**
     * Returns whether a existing project should be configured for test.
     *
     * @return  Configure Setting
     */
    public boolean getConfigureCustomProject()
    {
        return cbCustomProjectEnable.isSelected();
    }


    /**
     * Returns whether the <i>modern C++</i> option is enabled.
     *
     * @return  Setting of the <i>modern C++</i> option
     */
    public boolean getEnableModernCpp()
    {
        return cbEnableModernCpp.isSelected();
    }


    /**
     * Sets the test suite name.
     *
     * @param name  Name
     */
    void setTestSuiteName(String name)
    {
        tfTestSuiteName.setText(name);
    }


    /**
     * Sets the test case names.
     *
     * @param names     Names
     */
    void setTestCaseNames(List<String> names)
    {
        tfTestCaseName.setText(names.get(0));
    }


    /**
     * Initializes the listeners.
     */
    private void initListener()
    {
        final DocumentListener dl = new DocumentListener()
        {
            @Override
            public void insertUpdate(DocumentEvent e)
            {
                updateChangeListener();
            }

            @Override
            public void removeUpdate(DocumentEvent e)
            {
                updateChangeListener();
            }

            @Override
            public void changedUpdate(DocumentEvent e)
            {
                updateChangeListener();
            }
        };

        tfTestSuiteName.getDocument().addDocumentListener(dl);
        tfTestCaseName.getDocument().addDocumentListener(dl);
        cbGenerateTestCases.addActionListener((ActionEvent e) -> updateChangeListener());
    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfTestCaseName = new javax.swing.JTextField();
        cbGenerateSetup = new javax.swing.JCheckBox();
        cbGenerateTeardown = new javax.swing.JCheckBox();
        lGenerate = new javax.swing.JLabel();
        cbGenerateTestCases = new javax.swing.JCheckBox();
        lSuiteName = new javax.swing.JLabel();
        tfTestSuiteName = new javax.swing.JTextField();
        cbCustomProjectEnable = new javax.swing.JCheckBox();
        cbEnableModernCpp = new javax.swing.JCheckBox();

        tfTestCaseName.setText(org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.tfTestCaseName.text")); // NOI18N

        cbGenerateSetup.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbGenerateSetup, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.cbGenerateSetup.text")); // NOI18N

        cbGenerateTeardown.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbGenerateTeardown, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.cbGenerateTeardown.text")); // NOI18N

        lGenerate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(lGenerate, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.lGenerate.text")); // NOI18N

        cbGenerateTestCases.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbGenerateTestCases, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.cbGenerateTestCases.text")); // NOI18N
        cbGenerateTestCases.addActionListener(this::cbGenerateTestCasesActionPerformed);

        org.openide.awt.Mnemonics.setLocalizedText(lSuiteName, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.lSuiteName.text")); // NOI18N

        tfTestSuiteName.setText(org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.tfTestSuiteName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cbCustomProjectEnable, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.cbCustomProjectEnable.text")); // NOI18N
        cbCustomProjectEnable.setToolTipText("<html><p>Enables the <b>Test</b> functionality for custom projects (eg. using CMake). This is required only <i>once</i> per project (indeed enabling it repeatedly has no effect).</p>\n\n<p><b>Required make targets:</b>\n<ul>\n<li><i>build-tests</i> – Builds the tests</li>\n<li><i>test</i> – Executes the tests</li>\n</ul>\n</p>\n\n<p>See <a href=\"https://github.com/offa/NBCndUnit\">https://github.com/offa/NBCndUnit</a> for more information.</p>\n</html>");

        cbEnableModernCpp.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbEnableModernCpp, org.openide.util.NbBundle.getMessage(NewTestSuiteVisualPanel1.class, "NewTestSuiteVisualPanel1.cbEnableModernCpp.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lSuiteName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbEnableModernCpp)
                    .addComponent(cbCustomProjectEnable)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbGenerateSetup)
                        .addComponent(cbGenerateTeardown)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cbGenerateTestCases)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfTestCaseName))
                        .addComponent(tfTestSuiteName, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSuiteName)
                    .addComponent(tfTestSuiteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lGenerate)
                    .addComponent(cbGenerateSetup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbGenerateTeardown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbGenerateTestCases, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTestCaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEnableModernCpp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCustomProjectEnable)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the visible state of the input field according the checkbox state.
     *
     * @param evt   Event
     */
    private void cbGenerateTestCasesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbGenerateTestCasesActionPerformed
    {//GEN-HEADEREND:event_cbGenerateTestCasesActionPerformed
        tfTestCaseName.setVisible(((JCheckBox) evt.getSource()).isSelected());
    }//GEN-LAST:event_cbGenerateTestCasesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCustomProjectEnable;
    private javax.swing.JCheckBox cbEnableModernCpp;
    private javax.swing.JCheckBox cbGenerateSetup;
    private javax.swing.JCheckBox cbGenerateTeardown;
    private javax.swing.JCheckBox cbGenerateTestCases;
    private javax.swing.JLabel lGenerate;
    private javax.swing.JLabel lSuiteName;
    private javax.swing.JTextField tfTestCaseName;
    private javax.swing.JTextField tfTestSuiteName;
    // End of variables declaration//GEN-END:variables

}
